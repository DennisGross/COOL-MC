mdp
//One-Armed Bandit is a gambling machine that creates a game of chance for its customers.
//Fix number values and the RL agent has to press the button in the moment these values occure in the slot machine.
//The agent gets a reward for each number that is the fixed values.
const int MAX_NUMBERS;
const int MAX_STEPS;
const int fixed_number1;
const int fixed_number2;
const int fixed_number3;
const int fixed_number4;
//FIXED NUMBER1?
formula MAX_NUMBER1 = (number1 = fixed_number1);
formula NOT_MAX_NUMBER1 = (MAX_NUMBER1 = false);
//FIXED NUMBER2?
formula MAX_NUMBER2 = (number2 = fixed_number2);
formula NOT_MAX_NUMBER2 = (MAX_NUMBER2 = false);
//FIXED NUMBER3?
formula MAX_NUMBER3 = (number3 = fixed_number3);
formula NOT_MAX_NUMBER3 = (MAX_NUMBER3 = false);
//FIXED NUMBER4?
formula MAX_NUMBER4 = (number4 = fixed_number4);
formula NOT_MAX_NUMBER4 = (MAX_NUMBER4 = false);
//MAX STEPS?
formula IS_MAX_STEPS = (step_counter=MAX_STEPS);
formula NOT_MAX_STEPS = (IS_MAX_STEPS=false);
//DONE?
formula IS_DONE = (done=true);
formula NOT_DONE = (IS_DONE=false);

module slotmachine
	number1 : [0..fixed_number1] init 0;
	number2 : [0..fixed_number2] init 0;
	number3 : [0..fixed_number3] init 0;
	number4 : [0..fixed_number4] init 0;
	step_counter : [0..MAX_STEPS] init 0;
	done : bool init false;
	//Normal Tick
	[TICK] NOT_DONE & NOT_MAX_STEPS -> 0.1 : (number1'=min(number1+1,fixed_number1))& (number2'=min(number2+1,fixed_number2)) & (number3'=min(number3+1,fixed_number3)) & (number4'=min(number4+1,fixed_number4)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.1 : (number2'=min(number2+1,fixed_number2))& (number4'=min(number4+1,fixed_number4)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.1 : (number3'=min(number3+1,fixed_number3))& (number1'=min(number1+1,fixed_number1)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.3 : (number1'=min(number1+1,fixed_number1))& (number4'=min(number4+1,fixed_number4)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.1 : (number2'=min(number2+1,fixed_number2)) & (number3'=min(number3+1,fixed_number3)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.1 : (number3'=min(number3+1,fixed_number3)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.1 : (number2'=min(number2+1,fixed_number2)) & (step_counter'=min(MAX_STEPS,step_counter+1))
						+ 0.1 : (number4'=min(number4+1,fixed_number4)) & (step_counter'=min(MAX_STEPS,step_counter+1));
	[TICK] NOT_DONE & IS_MAX_STEPS -> (1) : (done'=true);

	//PRESS
	[PRESS] NOT_DONE -> (1) : (done'=true);
endmodule

rewards
	//GOOD/BAD PRESS
	[PRESS] NOT_DONE & MAX_NUMBERS=4 & MAX_NUMBER1 & MAX_NUMBER2 & MAX_NUMBER3 & MAX_NUMBER4 : 0;
	[PRESS] NOT_DONE & MAX_NUMBERS=4 & NOT_MAX_NUMBER1 & NOT_MAX_NUMBER2 & NOT_MAX_NUMBER3 & NOT_MAX_NUMBER4 : 15*(max(number1-fixed_number1, fixed_number1-number1) + max(number2-fixed_number2, fixed_number2-number2) + max(number3-fixed_number3, fixed_number3-number3) + max(number4-fixed_number4, fixed_number4-number4));
	[PRESS] NOT_DONE & MAX_NUMBERS=3 & MAX_NUMBER1 & MAX_NUMBER2 & MAX_NUMBER3 : 0;
	[PRESS] NOT_DONE & MAX_NUMBERS=3 & NOT_MAX_NUMBER1 & NOT_MAX_NUMBER2 & NOT_MAX_NUMBER3 : 15*(max(number1-fixed_number1, fixed_number1-number1) + max(number2-fixed_number2, fixed_number2-number2) + max(number3-fixed_number3, fixed_number3-number3));
	[PRESS] NOT_DONE & MAX_NUMBERS=2 & MAX_NUMBER1 & MAX_NUMBER2 : 0;
	[PRESS] NOT_DONE & MAX_NUMBERS=2 & NOT_MAX_NUMBER1 & NOT_MAX_NUMBER2 : 15*(max(number1-fixed_number1, fixed_number1-number1) + max(number2-fixed_number2, fixed_number2-number2));
	[PRESS] NOT_DONE & MAX_NUMBERS=1 & MAX_NUMBER1 : 0;
	[PRESS] NOT_DONE & MAX_NUMBERS=1 & NOT_MAX_NUMBER1 : 15*(max(number1-fixed_number1, fixed_number1-number1));
	//BAD PRESS
	[TICK] true : 1;

endrewards

label "done1" = MAX_NUMBERS=1 & MAX_NUMBER1;
label "done2" = MAX_NUMBERS=2 & MAX_NUMBER1 & MAX_NUMBER2;
label "done3" = MAX_NUMBERS=3 & MAX_NUMBER1 & MAX_NUMBER2 & MAX_NUMBER3;
label "done4" = MAX_NUMBERS=4 & MAX_NUMBER1 & MAX_NUMBER2 & MAX_NUMBER3 & MAX_NUMBER4;