mdp


const int max_consumption;
const int renewable_limit;
const int non_renewable_limit;


const int grid_upper_bound; //More energy leads to a disconnect of the non renewable energy production

//Blackout (as soon as there is a negative total energy)
formula IS_BLACKOUT = (renewable+non_renewable-consumption < 0);
formula NO_BLACKOUT = (IS_BLACKOUT = false);

//Too Much Energy
formula TOO_MUCH_ENERGY = (non_renewable + renewable - consumption > grid_upper_bound);
formula NOT_TOO_MUCH_ENERGY = (TOO_MUCH_ENERGY = false);


module Grid
	energy : [0..renewable_limit+non_renewable_limit] init renewable_limit;
	blackout : bool init false;
	//Less Equal upper bound
	[DECREASE_NONRENEWABLE] NO_BLACKOUT & renewable+non_renewable-consumption <= grid_upper_bound -> (energy'=max(0,renewable+non_renewable-consumption));
	[INCREASE_NONRENEWABLE] NO_BLACKOUT & renewable+non_renewable-consumption <= grid_upper_bound -> (energy'=max(0,renewable+non_renewable-consumption));
	[DECREASE_RENEWABLE] NO_BLACKOUT & renewable+non_renewable-consumption <= grid_upper_bound -> (energy'=max(0,renewable+non_renewable-consumption));
	[DECREASE_BOTH] NO_BLACKOUT & renewable+non_renewable-consumption <= grid_upper_bound -> (energy'=max(0,renewable+non_renewable-consumption));
	[TICK] NO_BLACKOUT & renewable+non_renewable-consumption <= grid_upper_bound -> (energy'=max(0,renewable+non_renewable-consumption));
	//Greater Than upper bound
	[DECREASE_NONRENEWABLE] NO_BLACKOUT & renewable+non_renewable-consumption > grid_upper_bound -> (energy'=grid_upper_bound);
	[INCREASE_NONRENEWABLE] NO_BLACKOUT & renewable+non_renewable-consumption > grid_upper_bound -> (energy'=grid_upper_bound);
	[DECREASE_RENEWABLE] NO_BLACKOUT & renewable+non_renewable-consumption > grid_upper_bound -> (energy'=grid_upper_bound);
	[DECREASE_BOTH] NO_BLACKOUT & renewable+non_renewable-consumption > grid_upper_bound -> (energy'=grid_upper_bound);
	[TICK] NO_BLACKOUT & renewable+non_renewable-consumption > grid_upper_bound -> (energy'=grid_upper_bound);
	//Blackout
	[DECREASE_NONRENEWABLE] IS_BLACKOUT -> (blackout'=true);
	[INCREASE_NONRENEWABLE] IS_BLACKOUT -> (blackout'=true);
	[DECREASE_RENEWABLE] IS_BLACKOUT -> (blackout'=true);
	[DECREASE_BOTH] IS_BLACKOUT -> (blackout'=true);
	[TICK] IS_BLACKOUT ->  (blackout'=true);
endmodule



module RenewableProduction

	renewable : [0..renewable_limit] init renewable_limit;

	[DECREASE_BOTH] renewable > 0 & NO_BLACKOUT -> 0.9 : (renewable'=renewable-1) + 0.1 : (renewable'=renewable);
	[DECREASE_BOTH] renewable = 0 & NO_BLACKOUT -> true;
	
	[DECREASE_RENEWABLE] renewable > 0 & NO_BLACKOUT -> 0.9 : (renewable'=renewable-1) + 0.1 : (renewable'=renewable);
	[DECREASE_RENEWABLE] renewable = 0 & NO_BLACKOUT -> true;

	
	[TICK] NO_BLACKOUT & renewable = renewable_limit -> 0.3 : (renewable'=renewable) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);
	[TICK] NO_BLACKOUT & renewable = 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);
	[TICK] NO_BLACKOUT & renewable < renewable_limit & renewable > 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable-1) + 0.4 : (renewable'=renewable);
	
	//OTHER ACTIONS (behaviour based on probability distribution)
	[INCREASE_NONRENEWABLE] NO_BLACKOUT & renewable = renewable_limit -> 0.3 : (renewable'=renewable) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);
	[DECREASE_NONRENEWABLE] NO_BLACKOUT & renewable = renewable_limit-> 0.3 : (renewable'=renewable) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);
	[DECREASE_BOTH] NO_BLACKOUT & renewable = renewable_limit -> 0.3 : (renewable'=renewable) + 0.3 : (renewable'=renewable-1) + 0.4 : (renewable'=renewable);

	[INCREASE_NONRENEWABLE] NO_BLACKOUT & renewable = 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);
	[DECREASE_NONRENEWABLE] NO_BLACKOUT & renewable = 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);
	[DECREASE_BOTH] NO_BLACKOUT & renewable = 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable) + 0.4 : (renewable'=renewable);

	[INCREASE_NONRENEWABLE] NO_BLACKOUT & renewable < renewable_limit & renewable > 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable-1) + 0.4 : (renewable'=renewable);
	[DECREASE_NONRENEWABLE] NO_BLACKOUT & renewable < renewable_limit & renewable > 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable-1) + 0.4 : (renewable'=renewable);
	[DECREASE_BOTH] NO_BLACKOUT & renewable < renewable_limit & renewable > 0 -> 0.3 : (renewable'=renewable+1) + 0.3 : (renewable'=renewable-1) + 0.4 : (renewable'=renewable);

	//BLACKOUT
	[DECREASE_BOTH] IS_BLACKOUT -> true;
	[DECREASE_NONRENEWABLE] IS_BLACKOUT -> true;
	[INCREASE_NONRENEWABLE] IS_BLACKOUT -> true;
	[DECREASE_RENEWABLE] IS_BLACKOUT -> true;
	[TICK] IS_BLACKOUT -> true;


endmodule


module NonRenewableProduction
	
	non_renewable : [0..non_renewable_limit] init 0;

	[DECREASE_BOTH] non_renewable > 0 & NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> 0.7 : (non_renewable'=non_renewable-1) + 0.2 : (non_renewable'=non_renewable) + 0.1 : (non_renewable'=0);
	[DECREASE_BOTH] non_renewable = 0 & NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> true;	

	
	[DECREASE_NONRENEWABLE] non_renewable > 0 & NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> 0.7 : (non_renewable'=non_renewable-1) + 0.2 : (non_renewable'=non_renewable) + 0.1 : (non_renewable'=0);
	[DECREASE_NONRENEWABLE] non_renewable = 0 & NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> true;	

	[INCREASE_NONRENEWABLE] non_renewable < non_renewable_limit & NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> 0.7 : (non_renewable'=non_renewable+1) + 0.2 : (non_renewable'=non_renewable) + 0.1 : (non_renewable'=0);
	[INCREASE_NONRENEWABLE] non_renewable = non_renewable_limit & NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> 0.7 : true + 0.3 : (non_renewable'=0);
	
	//If tick, do not do anything
	[TICK] NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> true;
	

	//OTHER ACTIONS
	[DECREASE_RENEWABLE] NO_BLACKOUT & NOT_TOO_MUCH_ENERGY -> true;

	//TOO MUCH ENERGY in Grid -> Gets disconnected
	[DECREASE_BOTH] NO_BLACKOUT & TOO_MUCH_ENERGY -> (non_renewable'=0);
	[DECREASE_NONRENEWABLE] NO_BLACKOUT & TOO_MUCH_ENERGY ->  (non_renewable'=0);
	[INCREASE_NONRENEWABLE] NO_BLACKOUT & TOO_MUCH_ENERGY ->  (non_renewable'=0);
	[DECREASE_RENEWABLE] NO_BLACKOUT & TOO_MUCH_ENERGY ->  (non_renewable'=0);
	[TICK] NO_BLACKOUT & TOO_MUCH_ENERGY -> true;

	//BLACKOUT
	[DECREASE_BOTH] IS_BLACKOUT -> true;
	[DECREASE_NONRENEWABLE] IS_BLACKOUT -> true;
	[INCREASE_NONRENEWABLE] IS_BLACKOUT -> true;
	[DECREASE_RENEWABLE] IS_BLACKOUT -> true;
	[TICK] IS_BLACKOUT -> true;
endmodule



module Consumption

	consumption : [0..max_consumption] init 0;
	
	//OTHER ACTIONS (always the same behaviour)
	[DECREASE_BOTH] consumption = 0 & NO_BLACKOUT -> 0.8 : (consumption'=consumption+1) + 0.2 : true;
	[DECREASE_BOTH] consumption > 0 & consumption < max_consumption & NO_BLACKOUT -> 0.4 : (consumption'=consumption+1) + 0.4 : (consumption'=consumption-1) + 0.2 : true;
	[DECREASE_BOTH] consumption = max_consumption & NO_BLACKOUT -> 0.8 : (consumption'=consumption-1) + 0.2 : true;

	[DECREASE_RENEWABLE] consumption = 0 & NO_BLACKOUT -> 0.8 : (consumption'=consumption+1) + 0.2 : true;
	[DECREASE_RENEWABLE] consumption > 0 & consumption < max_consumption & NO_BLACKOUT -> 0.4 : (consumption'=consumption+1) + 0.4 : (consumption'=consumption-1) + 0.2 : true;
	[DECREASE_RENEWABLE] consumption = max_consumption & NO_BLACKOUT -> 0.8 : (consumption'=consumption-1) + 0.2 : true;

	[DECREASE_NONRENEWABLE] consumption = 0 & NO_BLACKOUT -> 0.8 : (consumption'=consumption+1) + 0.2 : true;
	[DECREASE_NONRENEWABLE] consumption > 0 & consumption < max_consumption & NO_BLACKOUT -> 0.4 : (consumption'=consumption+1) + 0.4 : (consumption'=consumption-1) + 0.2 : true;
	[DECREASE_NONRENEWABLE] consumption = max_consumption & NO_BLACKOUT -> 0.8 : (consumption'=consumption-1) + 0.2 : true;
	
	
	[INCREASE_NONRENEWABLE] consumption = 0 & NO_BLACKOUT -> 0.8 : (consumption'=consumption+1) + 0.2 : true;
	[INCREASE_NONRENEWABLE] consumption > 0 & consumption < max_consumption & NO_BLACKOUT -> 0.4 : (consumption'=consumption+1) + 0.4 : (consumption'=consumption-1) + 0.2 : true;
	[INCREASE_NONRENEWABLE] consumption = max_consumption & NO_BLACKOUT -> 0.8 : (consumption'=consumption-1) + 0.2 : true;


	[TICK] consumption = 0 & NO_BLACKOUT -> 0.8 : (consumption'=consumption+1) + 0.2 : true;
	[TICK] consumption > 0 & consumption < max_consumption & NO_BLACKOUT -> 0.4 : (consumption'=consumption+1) + 0.4 : (consumption'=consumption-1) + 0.2 : true;
	[TICK] consumption = max_consumption & NO_BLACKOUT -> 0.8 : (consumption'=consumption-1) + 0.2 : true;


	//BLACKOUT
	[DECREASE_BOTH] IS_BLACKOUT -> true;
	[DECREASE_RENEWABLE] IS_BLACKOUT -> true;
	[DECREASE_NONRENEWABLE] IS_BLACKOUT -> true;
	[INCREASE_NONRENEWABLE] IS_BLACKOUT -> true;
	[TICK] IS_BLACKOUT -> true;

endmodule




rewards
	//NO BLACKOUT
	[DECREASE_RENEWABLE] NO_BLACKOUT : max(non_renewable-renewable,0);
	[DECREASE_NONRENEWABLE] NO_BLACKOUT : max(non_renewable-renewable,0);
	[INCREASE_NONRENEWABLE] NO_BLACKOUT : max(non_renewable-renewable,0);
	[DECREASE_BOTH] NO_BLACKOUT : max(non_renewable-renewable,0);
	[TICK] NO_BLACKOUT : max(non_renewable-renewable,0);
	//BLACKOUT
	[DECREASE_RENEWABLE] IS_BLACKOUT : 1000;
	[DECREASE_NONRENEWABLE] IS_BLACKOUT : 1000;
	[INCREASE_NONRENEWABLE] IS_BLACKOUT : 1000;
	[DECREASE_BOTH] IS_BLACKOUT : 1000;
	[TICK] IS_BLACKOUT : 1000;
endrewards



