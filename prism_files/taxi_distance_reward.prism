mdp
const int passenger_location_x;	//0: red, 1: yellow, 2: green, 3: blue
const int passenger_location_y;	//0: red, 1: yellow, 2: green, 3: blue
const int passenger_destination_x;	//0: red, 1: yellow, 2: green, 3: blue
const int passenger_destination_y;	//0: red, 1: yellow, 2: green, 3: blue
const int MAX_JOBS;
//Red Location
const int red_x = 0;
const int red_y = 4;
//Yellow Location
const int yellow_x = 0;
const int yellow_y = 0;
//Green Location
const int green_x = 4;
const int green_y = 4;
//Blue Location
const int blue_x = 3;
const int blue_y = 0;
//At North Border
formula NORTH_BORDER = (y=4);
formula NOT_NORTH_BORDER = (NORTH_BORDER=false);
//At East Border
formula EAST_BORDER = (x=4);
formula NOT_EAST_BORDER = (EAST_BORDER=false);
//At South Border
formula SOUTH_BORDER = (y=0);
formula NOT_SOUTH_BORDER = (SOUTH_BORDER=false);
//At West Border
formula WEST_BORDER = (x=0);
formula NOT_WEST_BORDER = (WEST_BORDER=false);
//At PICK_UP Location?
formula PICK_UP_LOCATION = (x=passenger_location_x) & (y=passenger_location_y);
formula NOT_PICK_UP_LOCATION = (PICK_UP_LOCATION = false);
//Passenger on board?
formula PASSENGER_ON_BOARD = (passenger = true);
formula NOT_PASSENGER_ON_BOARD = (PASSENGER_ON_BOARD = false);
//At DROP LOCATION Location?
formula DROP_LOCATION = (x=passenger_destination_x) & (y=passenger_destination_y);
formula NOT_DROP_LOCATION = (DROP_LOCATION = false);
//Done?
formula DONE = (jobs_done=MAX_JOBS);
formula NOT_DONE = (DONE = false);


module taxi
	//Location
	x : [0..4] init 2;
	y : [0..4] init 2;
	//transportations
	jobs_done : [0..MAX_JOBS] init 0;
	//Passenger on board?
	passenger : bool init false;
	//Passenger Init Colored Location
	passenger_loc_x : [0..4] init passenger_location_x;
	passenger_loc_y : [0..4] init passenger_location_y;
	//Passenger Destination Colored Location
	passenger_dest_x : [0..4] init passenger_destination_x;
	passenger_dest_y : [0..4] init passenger_destination_y; 
	//NORTH actions
	[NORTH] NOT_NORTH_BORDER & NOT_DONE -> (y'=y+1);
	//EAST actions
	[EAST] NOT_EAST_BORDER & NOT_DONE -> (x'=x+1);
	//SOUTH actions
	[SOUTH] NOT_SOUTH_BORDER & NOT_DONE -> (y'=y-1);
	//WEST actions
	[WEST] NOT_WEST_BORDER & NOT_DONE -> (x'=x-1);
	//PICK_UP actions
	[PICK_UP] PICK_UP_LOCATION & NOT_PASSENGER_ON_BOARD & NOT_DONE -> (passenger'=true);
	//DROP actions
	[DROP] DROP_LOCATION & PASSENGER_ON_BOARD & NOT_DONE ->  1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=red_x) & (passenger_loc_y'=red_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
						    	+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=yellow_x) & (passenger_loc_y'=yellow_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=green_x) & (passenger_loc_y'=green_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=red_x) & (passenger_dest_y'=red_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=yellow_x) & (passenger_dest_y'=yellow_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=green_x) & (passenger_dest_y'=green_y)  & (passenger'=false) & (jobs_done'=jobs_done+1)
							+ 1/16: (passenger_loc_x'=blue_x) & (passenger_loc_y'=blue_y)  & (passenger_dest_x'=blue_x) & (passenger_dest_y'=blue_y)  & (passenger'=false) & (jobs_done'=jobs_done+1);
endmodule


rewards
	//Passenger arrived
	[DROP] DROP_LOCATION & PASSENGER_ON_BOARD : 0;
	//Pick up Passenger
	[PICK_UP] NOT_PASSENGER_ON_BOARD & PICK_UP_LOCATION : 21; 
	//Life penality for each action if passenger is not on board
	[NORTH] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[EAST] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[SOUTH] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	[WEST] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	//NOT ON BOARD BUT PICK UP AT WRONG LOCATION
	[PICK_UP] NOT_PASSENGER_ON_BOARD & NOT_PICK_UP_LOCATION: 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	//DROP NOT POSSIBLE BECAUSE NO PASSENGER
	[DROP] NOT_PASSENGER_ON_BOARD : 21 + (max(passenger_loc_x-x, x-passenger_loc_x) + max(passenger_loc_y-y, y-passenger_loc_y));
	//Life penality for each action if passenger is on board
	[NORTH] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[EAST] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[SOUTH] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	[WEST] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	//PASSENGER ALREADY PICKED UP
	[PICK_UP] PASSENGER_ON_BOARD : 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
	//PASSENGER ON BOARD BUT NOT AT DROP LOCATION
	[DROP] NOT_DROP_LOCATION & PASSENGER_ON_BOARD: 21 + (max(passenger_dest_x-x, x-passenger_dest_x-x) + max(passenger_dest_y-y, y- passenger_dest_y));
endrewards


