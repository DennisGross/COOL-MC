mdp

//Winter is here. You and your friends were tossing around a
//frisbee at the park when you made a wild throw that left the frisbee out
//in the middle of the lake. The water is mostly frozen, but there are a few
//holes where the ice has melted. If you step into one of those holes, you'll 
//fall into the freezing water. At this time, there's an international frisbee shortage,
//so it's absolutely imperative that you navigate across the lake and retrieve the disc.
//However, the ice is slippery, so you won't always move in the direction you intend.

//The surface is described using a grid like the following:

//SFFF       (S: starting point, safe)
//FHFH       (F: frozen surface, safe)
//FFFH       (H: hole, fall to your doom)
//HFFG       (G: goal, where the frisbee is located)

//The agent controls the movement of a character in a grid world.
//Some tiles of the grid are walkable, and others lead to the agent falling into the water.
//Additionally, the movement direction of the agent is uncertain and only partially depends
//on the chosen direction. The agent is rewarded for finding a walkable path to a goal tile.
//Slippery factor
const double slippery;
//Hole 1
const int hole1_x = 0;
const int hole1_y = 0;
formula IN_HOLE1 = (x = hole1_x & y = hole1_y);
//Hole 2
const int hole2_x = 1;
const int hole2_y = 2;
formula IN_HOLE2 = (x = hole2_x & y = hole2_y);
//Hole 3
const int hole3_x = 3;
const int hole3_y = 2;
formula IN_HOLE3 = (x = hole3_x & y = hole3_y);
//Hole 4
const int hole4_x = 3;
const int hole4_y = 1;
formula IN_HOLE4 = (x = hole4_x & y = hole4_y);
//Is agent in a waterhole?
formula IS_IN_HOLE = IN_HOLE1 | IN_HOLE2 | IN_HOLE3 | IN_HOLE4;
formula NOT_IN_HOLE = (IS_IN_HOLE = false);
//Goal
const int goal_x = 3;
const int goal_y = 0;
//Is agent at the goal?
formula IS_AT_GOAL = (goal_x = x & goal_y = y);
formula IS_NOT_AT_GOAL = (IS_AT_GOAL = false);

//Is the agent at a border?
formula TOP_BORDER = (y = 3);
formula NOT_TOP_BORDER = (TOP_BORDER = false);
formula RIGHT_BORDER = (x = 3);
formula NOT_RIGHT_BORDER = (RIGHT_BORDER = false);
formula BOTTOM_BORDER = (y = 0);
formula NOT_BOTTOM_BORDER = (BOTTOM_BORDER = false);
formula LEFT_BORDER = (x = 0);
formula NOT_LEFT_BORDER = (LEFT_BORDER = false);

//done?
formula IS_DONE = done;
formula IS_NOT_DONE = (IS_DONE = false);


module agent
	x: [0..3] init 0;
	y: [0..3] init 3;
	done: bool init false;
	//1223
	//4556
	//4556
	//7889
	//1
	[UP] TOP_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x);
	//2
	[UP] TOP_BORDER & NOT_LEFT_BORDER & NOT_RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//3
	[UP] TOP_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y) + (slippery/3) : (x'=x) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//4
	[UP] NOT_TOP_BORDER & LEFT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y+1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x);
	//5
	[UP] NOT_TOP_BORDER & NOT_RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y+1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//6
	[UP] NOT_TOP_BORDER & RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y+1) + (slippery/3) : (x'=x) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//7
	[UP] BOTTOM_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y+1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x);
	//8
	[UP] BOTTOM_BORDER & NOT_RIGHT_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y+1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x-1);
	//9
	[UP] BOTTOM_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (y'=y+1) + (slippery/3) : (x'=x) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x-1);
	
	//1
	[RIGHT] TOP_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL& IS_NOT_AT_GOAL-> (1-slippery) : (x'=x+1) + (slippery/3) : (y'=y) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x);
	//2
	[RIGHT] TOP_BORDER & NOT_LEFT_BORDER & NOT_RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE& IS_NOT_AT_GOAL-> (1-slippery) : (x'=x+1) + (slippery/3) : (y'=y) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//3
	[RIGHT] TOP_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x) + (slippery/3) : (y'=y) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//4
	[RIGHT] NOT_TOP_BORDER & LEFT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x);
	//5
	[RIGHT] NOT_TOP_BORDER & NOT_RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL -> (1-slippery) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//6
	[RIGHT] NOT_TOP_BORDER & RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x-1);
	//7
	[RIGHT] BOTTOM_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x);
	//8
	[RIGHT] BOTTOM_BORDER & NOT_RIGHT_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x-1);
	//9
	[RIGHT] BOTTOM_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x-1);
	
	
	//1
	[DOWN] TOP_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y-1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x);
	//2
	[DOWN] TOP_BORDER & NOT_LEFT_BORDER & NOT_RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y-1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x-1);
	//3
	[DOWN] TOP_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y-1) + (slippery/3) : (x'=x) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x-1);
	//4
	[DOWN] NOT_TOP_BORDER & LEFT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y-1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (x'=x);
	//5
	[DOWN] NOT_TOP_BORDER & NOT_RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y-1) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (x'=x-1);
	//6
	[DOWN] NOT_TOP_BORDER & RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y-1) + (slippery/3) : (x'=x) + (slippery/3) : (y'=y+1) + (slippery/3) : (x'=x-1);
	//7
	[DOWN] BOTTOM_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (x'=x);
	//8
	[DOWN] BOTTOM_BORDER & NOT_RIGHT_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y) + (slippery/3) : (x'=x+1) + (slippery/3) : (y'=y+1) + (slippery/3) : (x'=x-1);
	//9
	[DOWN] BOTTOM_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (y'=y) + (slippery/3) : (x'=x) + (slippery/3) : (y'=y+1) + (slippery/3) : (x'=x-1);

	//1
	[LEFT] TOP_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x) + (slippery/3) : (y'=y) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x+1);
	//2
	[LEFT] TOP_BORDER & NOT_LEFT_BORDER & NOT_RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x-1) + (slippery/3) : (y'=y) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x+1);
	//3
	[LEFT] TOP_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x-1) + (slippery/3) : (y'=y) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x);
	//4
	[LEFT] NOT_TOP_BORDER & LEFT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x+1);
	//5
	[LEFT] NOT_TOP_BORDER & NOT_RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x-1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x+1);
	//6
	[LEFT] NOT_TOP_BORDER & RIGHT_BORDER & NOT_BOTTOM_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x-1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y-1) + (slippery/3) : (x'=x);
	//7
	[LEFT] BOTTOM_BORDER & LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x+1);
	//8
	[LEFT] BOTTOM_BORDER & NOT_RIGHT_BORDER & NOT_LEFT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x-1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x+1);
	//9
	[LEFT] BOTTOM_BORDER & RIGHT_BORDER & NOT_IN_HOLE & IS_NOT_DONE & IS_NOT_AT_GOAL-> (1-slippery) : (x'=x-1) + (slippery/3) : (y'=y+1) + (slippery/3) : (y'=y) + (slippery/3) : (x'=x);
	
	[UP] IS_IN_HOLE  & IS_NOT_DONE -> (done'=true);
	[RIGHT] IS_IN_HOLE  & IS_NOT_DONE -> (done'=true);
	[DOWN] IS_IN_HOLE  & IS_NOT_DONE -> (done'=true);
	[LEFT] IS_IN_HOLE  & IS_NOT_DONE  -> (done'=true);
	
	[UP] IS_AT_GOAL & IS_NOT_DONE -> (done'=true);
	[RIGHT] IS_AT_GOAL  & IS_NOT_DONE -> (done'=true);
	[DOWN] IS_AT_GOAL  & IS_NOT_DONE -> (done'=true);
	[LEFT] IS_AT_GOAL & IS_NOT_DONE -> (done'=true);

	
endmodule

rewards
	[UP] IS_IN_HOLE & IS_NOT_DONE : 800;
	[RIGHT] IS_IN_HOLE & IS_NOT_DONE: 800;
	[DOWN] IS_IN_HOLE & IS_NOT_DONE: 800;
	[LEFT] IS_IN_HOLE & IS_NOT_DONE: 800;

	[UP] IS_AT_GOAL & IS_NOT_DONE: 0;
	[RIGHT] IS_AT_GOAL & IS_NOT_DONE : 0;
	[DOWN] IS_AT_GOAL & IS_NOT_DONE: 0;
	[LEFT] IS_AT_GOAL & IS_NOT_DONE: 0;

	[UP] IS_NOT_AT_GOAL & NOT_IN_HOLE : 100;
	[RIGHT] IS_NOT_AT_GOAL & NOT_IN_HOLE : 100;
	[DOWN] IS_NOT_AT_GOAL & NOT_IN_HOLE : 100;
	[LEFT] IS_NOT_AT_GOAL & NOT_IN_HOLE : 100;

endrewards

label "water" = IS_IN_HOLE;
label "not_start_position" = (x!=0 & y!=3);
label "frisbee" = IS_AT_GOAL;