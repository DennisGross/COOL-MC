mdp

const int max_size=3;
const int max_bureaucracy=4;
const int max_income_rate=1;

//done?
formula IS_DONE = done;
formula IS_NOT_DONE = (IS_DONE = false);

//STORAGE
formula STORAGE_FULL = (stack=max_size);
formula STORAGE_EMPTY = (stack = 0);
formula STORAGE_NOT_EMPTY = (STORAGE_EMPTY=false);

//INCOME
formula IS_BELOW_MAX_INCOME = (income_rate < max_income_rate);
formula IS_MAX_INCOME = (IS_BELOW_MAX_INCOME = false);
formula IS_ABOVE_ZERO = (income_rate > 0);
formula IS_ZERO_INCOME = (IS_ABOVE_ZERO = false);


//bureaucracy
formula BUREAUCRACY = (bureaucracy > 2);
formula NO_BUREAUCRACY = (bureaucracy = 0);
formula TOO_MUCH_BUREAUCRACY = (bureaucracy = max_bureaucracy);
formula NOT_TOO_MUCH_BUREAUCRACY = (TOO_MUCH_BUREAUCRACY = false);

module storage
	stack : [0..max_size] init 0;
	done: bool init false;
	// bureaucracy

	//WAIT
	[WAIT] IS_NOT_DONE -> (1) : (stack'=stack+income_rate);

	//OFFICE_WORK
	[OFFICE_WORK] IS_NOT_DONE -> true;

	//STORAGE WORK
	[STORAGE_WORK] IS_NOT_DONE & STORAGE_NOT_EMPTY -> (0.5) : (stack'= stack-1) + (0.5) : (stack'= 0);
	[STORAGE_WORK] IS_NOT_DONE & STORAGE_EMPTY -> true;

	//DONE
	[WAIT] IS_NOT_DONE & STORAGE_FULL -> (1) : (done'=true);
	[STORAGE_WORK] IS_NOT_DONE & STORAGE_FULL -> (1) : (done'=true);
	
endmodule

module office
	bureaucracy : [0..max_bureaucracy] init 0;
	//WAIT
	[WAIT] IS_NOT_DONE & NOT_TOO_MUCH_BUREAUCRACY -> (0.3) : (bureaucracy'=bureaucracy+1) + (0.7) : true;
	[WAIT] IS_NOT_DONE & TOO_MUCH_BUREAUCRACY -> (1) : true;

	//OFFICE_WORK
	[OFFICE_WORK] IS_NOT_DONE & BUREAUCRACY -> (1) : (bureaucracy'=bureaucracy-1);
	[OFFICE_WORK] IS_NOT_DONE & NO_BUREAUCRACY -> (1) : (bureaucracy'=bureaucracy);

	//STORAGE WORK
	[STORAGE_WORK] IS_NOT_DONE -> (1) : true;
	

endmodule

module deliverer
	income_rate : [0..max_income_rate] init 1;

	// WAIT
	//BOTH
	[WAIT] IS_NOT_DONE & IS_BELOW_MAX_INCOME & IS_ABOVE_ZERO -> (0.25) : (income_rate'=income_rate+1) + (0.5) : (income_rate'=income_rate) + (0.25) : (income_rate'=income_rate-1);
	//INCREASE
	[WAIT] IS_NOT_DONE & IS_BELOW_MAX_INCOME & IS_ZERO_INCOME -> (0.25) : (income_rate'=income_rate+1) + (0.75) : (income_rate'=income_rate);
	//DECREASE
	[WAIT] IS_NOT_DONE & IS_MAX_INCOME & IS_ABOVE_ZERO -> (0.75) : (income_rate'=income_rate) + (0.25) : (income_rate'=income_rate-1);

	//OFFICE_WORK
	//BOTH
	[OFFICE_WORK] IS_NOT_DONE & IS_BELOW_MAX_INCOME & IS_ABOVE_ZERO -> (0.25) : (income_rate'=income_rate+1) + (0.5) : (income_rate'=income_rate) + (0.25) : (income_rate'=income_rate-1);
	//INCREASE
	[OFFICE_WORK] IS_NOT_DONE & IS_BELOW_MAX_INCOME & IS_ZERO_INCOME -> (0.25) : (income_rate'=income_rate+1) + (0.75) : (income_rate'=income_rate);
	//DECREASE
	[OFFICE_WORK] IS_NOT_DONE & IS_MAX_INCOME & IS_ABOVE_ZERO -> (0.75) : (income_rate'=income_rate) + (0.25) : (income_rate'=income_rate-1);

	//STORAGE WORK
	[STORAGE_WORK] IS_NOT_DONE -> (1) : true;
endmodule

